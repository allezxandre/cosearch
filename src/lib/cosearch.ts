/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/contributors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Contributors */
        get: operations["read_contributors_contributors_get"];
        put?: never;
        /** Create Contributor */
        post: operations["create_contributor_contributors_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contributors/{contributor_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Contributor */
        get: operations["read_contributor_contributors__contributor_id__get"];
        /** Update Contributor */
        put: operations["update_contributor_contributors__contributor_id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contributors/local_handle/{local_handle}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Contributor By Local Handle */
        get: operations["read_contributor_by_local_handle_contributors_local_handle__local_handle__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contributors/{contributor_id}/reviewed_contributions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Contributor Reviewed Contributions */
        get: operations["read_contributor_reviewed_contributions_contributors__contributor_id__reviewed_contributions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contributions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Contributions */
        get: operations["read_contributions_contributions_get"];
        put?: never;
        /** Create Contribution */
        post: operations["create_contribution_contributions_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contributions/{contribution_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Contribution */
        get: operations["read_contribution_contributions__contribution_id__get"];
        /** Update Contribution */
        put: operations["update_contribution_contributions__contribution_id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contributions/{contribution_id}/children": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Contribution Children */
        get: operations["read_contribution_children_contributions__contribution_id__children_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contributions/{contribution_id}/contributors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Contribution Contributors */
        get: operations["read_contribution_contributors_contributions__contribution_id__contributors_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Tags */
        get: operations["read_tags_tags_get"];
        put?: never;
        /** Create Tag */
        post: operations["create_tag_tags_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags/{tag_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Tag */
        get: operations["read_tag_tags__tag_id__get"];
        /** Update Tag */
        put: operations["update_tag_tags__tag_id__put"];
        post?: never;
        /** Delete Tag */
        delete: operations["delete_tag_tags__tag_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reviews": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Reviews */
        get: operations["read_reviews_reviews_get"];
        put?: never;
        /** Create Review */
        post: operations["create_review_reviews_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reviews/{review_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Review */
        get: operations["read_review_reviews__review_id__get"];
        /** Update Review */
        put: operations["update_review_reviews__review_id__put"];
        post?: never;
        /** Delete Review */
        delete: operations["delete_review_reviews__review_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sentry-debug": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Trigger Error */
        get: operations["trigger_error_sentry_debug_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** ContributionCreate */
        ContributionCreate: {
            /** Title */
            title: string;
            /** Short Title */
            short_title?: string | null;
            /**
             * Date
             * Format: date-time
             */
            date: string;
            /** Links */
            links: components["schemas"]["ContributionLinks"][];
            /** Description */
            description: string;
            /** Archived At */
            archived_at?: string | null;
            /** Archive Reason */
            archive_reason?: string | null;
            /** Discord Chat Link */
            discord_chat_link?: string | null;
            /** Github Link */
            github_link?: string | null;
            /** Forum Link */
            forum_link?: string | null;
            /** Wiki Link */
            wiki_link?: string | null;
            /** Contributors */
            contributors: number[];
            /** Tags */
            tags: number[];
            /**
             * Dependencies
             * @default []
             */
            dependencies: string[];
        };
        /** ContributionDependency */
        ContributionDependency: {
            /** Id */
            id: string;
            /** Title */
            title: string;
            /** Short Title */
            short_title?: string | null;
        };
        /** ContributionLinks */
        ContributionLinks: {
            /** Description */
            description: string;
            /**
             * Url
             * Format: uri
             */
            url: string;
        };
        /** ContributionShort */
        ContributionShort: {
            /** Id */
            id: string;
            /** Title */
            title: string;
            /** Short Title */
            short_title?: string | null;
            /**
             * Date
             * Format: date-time
             */
            date: string;
            /** Discord Chat Link */
            discord_chat_link?: string | null;
            /** Github Link */
            github_link?: string | null;
            /** Forum Link */
            forum_link?: string | null;
            /** Wiki Link */
            wiki_link?: string | null;
            /** Archived At */
            archived_at?: string | null;
            /** Archive Reason */
            archive_reason?: string | null;
            /**
             * Contributors
             * @default []
             */
            contributors: components["schemas"]["ContributorShort"][];
            /**
             * Tags
             * @default []
             */
            tags: components["schemas"]["TagPublic"][];
            /**
             * Reviews
             * @default []
             */
            reviews: components["schemas"]["ReviewShort"][];
            /**
             * Dependencies
             * @default []
             */
            dependencies: components["schemas"]["ContributionDependency"][];
        };
        /** ContributionUpdate */
        ContributionUpdate: {
            /** Title */
            title: string;
            /** Short Title */
            short_title?: string | null;
            /**
             * Date
             * Format: date-time
             */
            date: string;
            /** Links */
            links: components["schemas"]["ContributionLinks"][];
            /** Description */
            description: string;
            /** Archived At */
            archived_at?: string | null;
            /** Archive Reason */
            archive_reason?: string | null;
            /** Discord Chat Link */
            discord_chat_link?: string | null;
            /** Github Link */
            github_link?: string | null;
            /** Forum Link */
            forum_link?: string | null;
            /** Wiki Link */
            wiki_link?: string | null;
            /** Contributors */
            contributors: number[];
            /** Tags */
            tags: number[];
            /**
             * Dependencies
             * @default []
             */
            dependencies: string[];
        };
        /** ContributionWithAttributesShortPublic */
        ContributionWithAttributesShortPublic: {
            /** Title */
            title: string;
            /** Short Title */
            short_title?: string | null;
            /**
             * Date
             * Format: date-time
             */
            date: string;
            /** Links */
            links: components["schemas"]["ContributionLinks"][];
            /** Description */
            description: string;
            /** Archived At */
            archived_at?: string | null;
            /** Archive Reason */
            archive_reason?: string | null;
            /** Id */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /** Discord Chat Link */
            discord_chat_link?: string | null;
            /** Github Link */
            github_link?: string | null;
            /** Forum Link */
            forum_link?: string | null;
            /** Wiki Link */
            wiki_link?: string | null;
            /**
             * Contributors
             * @default []
             */
            contributors: components["schemas"]["ContributorShort"][];
            /**
             * Tags
             * @default []
             */
            tags: components["schemas"]["TagPublic"][];
            /**
             * Reviews
             * @default []
             */
            reviews: components["schemas"]["ReviewShort"][];
            /**
             * Dependencies
             * @default []
             */
            dependencies: components["schemas"]["ContributionShort"][];
        };
        /** ContributorReviewedContributions */
        ContributorReviewedContributions: {
            /**
             * Reviewed Contributions
             * @default []
             */
            reviewed_contributions: components["schemas"]["ContributionShort"][];
        };
        /** ContributorShort */
        ContributorShort: {
            /** Id */
            id: number;
            /** Local Handle */
            local_handle: string;
            /** Display Name */
            display_name?: string | null;
        };
        /** ContributorUpsert */
        ContributorUpsert: {
            /** Local Handle */
            local_handle: string;
            /** Display Name */
            display_name?: string | null;
            /** Discord Handle */
            discord_handle?: string | null;
            /** Github Account */
            github_account?: string | null;
            /** Discourse Account */
            discourse_account?: string | null;
            /** Wiki Account */
            wiki_account?: string | null;
            /** Website */
            website?: string | null;
            /** Extra Info */
            extra_info?: {
                [key: string]: string | undefined;
            } | null;
        };
        /**
         * ContributorViewPublic
         * @description Public view of a contributor, including contributions and reviewed contributions.
         *     Used to display a contributor's profile.
         *     Requires one additional query to get reviewed contributions.
         */
        ContributorViewPublic: {
            /** Local Handle */
            local_handle: string;
            /** Display Name */
            display_name?: string | null;
            /** Discord Handle */
            discord_handle?: string | null;
            /** Github Account */
            github_account?: string | null;
            /** Discourse Account */
            discourse_account?: string | null;
            /** Wiki Account */
            wiki_account?: string | null;
            /** Website */
            website?: string | null;
            /** Extra Info */
            extra_info?: {
                [key: string]: string | undefined;
            } | null;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /**
             * Contributions
             * @default []
             */
            contributions: components["schemas"]["ContributionShort"][];
            /**
             * Reviewed Contributions
             * @default []
             */
            reviewed_contributions: components["schemas"]["ContributionShort"][];
        };
        /**
         * ContributorWithAttributesShortPublic
         * @description Public view of a contributor, including contributions.
         *     Used to display all contributors.
         */
        ContributorWithAttributesShortPublic: {
            /** Local Handle */
            local_handle: string;
            /** Display Name */
            display_name?: string | null;
            /** Discord Handle */
            discord_handle?: string | null;
            /** Github Account */
            github_account?: string | null;
            /** Discourse Account */
            discourse_account?: string | null;
            /** Wiki Account */
            wiki_account?: string | null;
            /** Website */
            website?: string | null;
            /** Extra Info */
            extra_info?: {
                [key: string]: string | undefined;
            } | null;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /**
             * Contributions
             * @default []
             */
            contributions: components["schemas"]["ContributionShort"][];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** Message */
        Message: {
            /** Message */
            message: string;
        };
        /** ReviewCreate */
        ReviewCreate: {
            /** Link */
            link: string;
            /** Notes */
            notes: string;
            /** Contribution Id */
            contribution_id: string;
            /** Reviewers */
            reviewers: number[];
        };
        /** ReviewPublic */
        ReviewPublic: {
            /** Link */
            link: string;
            /** Notes */
            notes: string;
            /** Id */
            id: number;
            /** Contribution Id */
            contribution_id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /**
             * Reviewers
             * @default []
             */
            reviewers: components["schemas"]["ContributorShort"][];
        };
        /** ReviewShort */
        ReviewShort: {
            /** Id */
            id: number;
        };
        /** ReviewUpdate */
        ReviewUpdate: {
            /** Link */
            link: string;
            /** Notes */
            notes: string;
            /** Contribution Id */
            contribution_id: string;
            /** Reviewers */
            reviewers: number[];
        };
        /** Tag */
        Tag: {
            /** Display Name */
            display_name: string;
            /** Color */
            color: string;
            /** Id */
            id?: number | null;
            /** Created At */
            created_at?: string | null;
            /** Updated At */
            updated_at?: string | null;
        };
        /** TagCreate */
        TagCreate: {
            /** Display Name */
            display_name: string;
            /** Color */
            color: string;
        };
        /** TagPublic */
        TagPublic: {
            /** Display Name */
            display_name: string;
            /** Color */
            color: string;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** TagUpdate */
        TagUpdate: {
            /** Display Name */
            display_name: string;
            /** Color */
            color: string;
        };
        /** TagViewPublic */
        TagViewPublic: {
            /** Display Name */
            display_name: string;
            /** Color */
            color: string;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /**
             * Contributions
             * @default []
             */
            contributions: components["schemas"]["TaggedContributionShort"][];
        };
        /**
         * TaggedContributionShort
         * @description Used to display contribution for a specific tag.
         *     Type of attribute `tags` is Tag instead of TagPublic to avoid infinite recursion.
         */
        TaggedContributionShort: {
            /** Id */
            id: string;
            /** Title */
            title: string;
            /** Short Title */
            short_title?: string | null;
            /**
             * Date
             * Format: date-time
             */
            date: string;
            /** Discord Chat Link */
            discord_chat_link?: string | null;
            /** Github Link */
            github_link?: string | null;
            /** Forum Link */
            forum_link?: string | null;
            /** Wiki Link */
            wiki_link?: string | null;
            /** Archived At */
            archived_at?: string | null;
            /** Archive Reason */
            archive_reason?: string | null;
            /**
             * Contributors
             * @default []
             */
            contributors: components["schemas"]["ContributorShort"][];
            /**
             * Tags
             * @default []
             */
            tags: components["schemas"]["Tag"][];
            /**
             * Reviews
             * @default []
             */
            reviews: components["schemas"]["ReviewShort"][];
            /**
             * Dependencies
             * @default []
             */
            dependencies: components["schemas"]["ContributionDependency"][];
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    read_contributors_contributors_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContributorWithAttributesShortPublic"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_contributor_contributors_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContributorUpsert"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContributorWithAttributesShortPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_contributor_contributors__contributor_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contributor_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContributorViewPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_contributor_contributors__contributor_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contributor_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContributorUpsert"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContributorWithAttributesShortPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_contributor_by_local_handle_contributors_local_handle__local_handle__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                local_handle: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContributorViewPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_contributor_reviewed_contributions_contributors__contributor_id__reviewed_contributions_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contributor_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContributorReviewedContributions"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_contributions_contributions_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContributionWithAttributesShortPublic"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_contribution_contributions_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContributionCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContributionWithAttributesShortPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_contribution_contributions__contribution_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contribution_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContributionWithAttributesShortPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_contribution_contributions__contribution_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contribution_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContributionUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContributionWithAttributesShortPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_contribution_children_contributions__contribution_id__children_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contribution_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContributionShort"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_contribution_contributors_contributions__contribution_id__contributors_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contribution_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContributorShort"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_tags_tags_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagPublic"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_tag_tags_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_tag_tags__tag_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tag_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagViewPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_tag_tags__tag_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tag_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_tag_tags__tag_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tag_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Message"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_reviews_reviews_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReviewPublic"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_review_reviews_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReviewCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReviewPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_review_reviews__review_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                review_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReviewPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_review_reviews__review_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                review_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReviewUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReviewPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_review_reviews__review_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                review_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Message"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    trigger_error_sentry_debug_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
